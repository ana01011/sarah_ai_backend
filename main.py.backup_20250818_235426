"""
Sarah AI - Complete Identity Fix
"""
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from llama_cpp import Llama
import time
import psutil
import re

app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Set CPU affinity
try:
    p = psutil.Process()
    p.cpu_affinity([4, 5, 6, 7])
except:
    pass

print("ðŸš€ Loading Sarah AI...")
model = Llama(
    model_path="openhermes-2.5-mistral-7b.Q4_K_M.gguf",
    n_ctx=1024,
    n_threads=4,
    n_batch=256,
    use_mmap=True,
    use_mlock=True,
    verbose=False
)
print("âœ… Sarah AI Ready!")

class ChatRequest(BaseModel):
    message: str
    max_tokens: int = 150
    temperature: float = 0.7

def is_identity_question(message):
    """Check if asking about identity/creator"""
    msg = message.lower()
    identity_words = [
        'who created', 'who made', 'who built', 'who designed',
        'who developed', 'who are you', 'what are you',
        'created by', 'made by', 'built by', 'designed by',
        'your creator', 'your developer', 'your maker',
        'openai', 'open ai', 'chatgpt', 'gpt', 'anthropic', 'claude',
        'who owns you', 'who maintains you', 'where are you from',
        'what company', 'which company', 'what organization'
    ]
    return any(word in msg for word in identity_words)

def clean_response(text):
    """Remove ALL mentions of other AIs and companies"""
    # List of replacements
    replacements = {
        r'\b[Oo]pen\s?AI\b': 'my developers',
        r'\b[Cc]hat\s?GPT\b': 'Sarah AI',
        r'\b[Gg]PT[-\s]?\d*\b': 'Sarah AI',
        r'\b[Aa]nthrop[ic]*\b': 'my developers',
        r'\b[Cc]laude\b': 'Sarah AI',
        r'\b[Mm]icrosoft\b': 'my developers',
        r'\b[Gg]oogle\b': 'my developers',
        r'Yes, I am the Open AI': 'I am Sarah AI',
        r'I am a text-based AI model created by': 'I am Sarah AI, created by',
        r'Open AI Product': 'Sarah AI',
    }
    
    for pattern, replacement in replacements.items():
        text = re.sub(pattern, replacement, text)
    
    # If still contains problematic words, return safe response
    problem_words = ['openai', 'open ai', 'chatgpt', 'gpt-', 'anthropic', 'claude']
    if any(word in text.lower() for word in problem_words):
        return "I'm Sarah AI, an independent AI assistant created by independent developers using open-source technology. How can I help you?"
    
    return text

@app.post("/api/chat")
async def chat(request: ChatRequest):
    start = time.time()
    
    # Check if identity question
    if is_identity_question(request.message):
        # Always return consistent identity
        response_text = "I'm Sarah AI, an independent AI assistant created by independent developers using open-source technology. I'm not associated with OpenAI, Anthropic, or any major tech company. I'm here to help you with your questions and tasks."
    else:
        # Generate response for non-identity questions
        response = model(
            f"User: {request.message}\nAssistant:",
            max_tokens=request.max_tokens,
            temperature=request.temperature,
            stop=["User:"],
            echo=False
        )
        response_text = response['choices'][0]['text'].strip()
        
        # Clean any problematic mentions
        response_text = clean_response(response_text)
    
    elapsed = time.time() - start
    return {
        "response": response_text,
        "role": "general",
        "stats": {
            "time": round(elapsed, 2),
            "tokens": len(response_text.split()),
            "tokens_per_second": round(len(response_text.split())/elapsed, 1)
        }
    }

@app.get("/health")
async def health():
    return {"status": "healthy", "name": "Sarah AI", "identity": "Independent AI"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
